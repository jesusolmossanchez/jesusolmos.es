var contenedor = document.getElementById("contenedor_loader"); window.mouse = function () { var e, o = { x: 0, y: 0, w: 0, alt: !1, shift: !1, ctrl: !1, buttonRaw: 0, over: !1, buttonOnMasks: [1, 2, 4], buttonOffMasks: [6, 5, 3], active: !1, bounds: null, eventNames: "touchmove,mousemove,mousedown,mouseup,mouseout,mouseover".split(","), event(o) { var t = o.type; e.bounds = e.element.getBoundingClientRect(), touch = void 0, o.touches && (touch = o.touches[0]), e.x = (o.pageX || touch.pageX) - e.bounds.left - scrollX, e.y = (o.pageY || touch.pageY) - e.bounds.top - scrollY, e.alt = o.altKey, e.shift = o.shiftKey, e.ctrl = o.ctrlKey, "mousedown" === t ? e.buttonRaw |= e.buttonOnMasks[o.which - 1] : "mouseup" === t ? e.buttonRaw &= e.buttonOffMasks[o.which - 1] : "mouseout" === t ? e.over = !1 : "mouseover" === t && (e.over = !0), e.callbacks, 2 & e.buttonRaw && null !== e.crashRecover && "function" == typeof e.crashRecover && setTimeout(e.crashRecover, 0), o.preventDefault() }, addCallback(o) { "function" == typeof o && (void 0 === e.callbacks ? e.callbacks = [o] : e.callbacks.push(o)) }, start(o) { void 0 !== e.element && e.remove(), e.element = void 0 === o ? document : o, e.active = !0 }, remove() { void 0 !== e.element && (e.element = e.callbacks = void 0, e.active = !1) } }; return e = o, o }();